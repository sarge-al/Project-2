<!DOCTYPE html>

<div class = "header">

<h1> Project 2 </h1>

<p> <b> Goal </b>: To improve your understanding of JavaScript syntax, functions, and higher-order functions, and to better understand JavaScript and Array methods. </p>

</div>

<html>

<body>

<h2>forEach()</h2>

<p>Without using the native “Array.prototype.forEach” method of JavaScript, compose a function titled “myEach” that will take in an array of elements and executes any callback function on each of those elements.</p>

<h3> Output:</h3>

<p id="Test1"></p>

<script>
var nums = [1,2,3,4,5];
nums.forEach(myFunction)

function myFunction(item, index, arr){
arr[index] = item;
}

document.getElementById("Test1").innerHTML = nums;
</script>


<h2>myMap()</h2>

<p>Without using the native “Array.prototype.map” method of JavaScript, compose a function titled “myMap” that will take in an array of elements and executes a callback function on each of those elements.</p>

<h3> Output: </h3>

<p id="Test2"></p>

<script>
var nums = [1, 2 , 3 , 4, 5];
var newArr = nums.map(myFunction)

function myFunction(x){
return x * 10;
}

document.getElementById("Test2").innerHTML = newArr;
</script>


<h2>myFilter()</h2>
<p>Without using the native “Array.prototype.filter” method of JavaScript, compose a function titled “myFilter” that will take in an array of elements and executes a callback function on each of those elements.</p>
<h3> Output </h3>
<p id="Test3"></p>

<script>

</script>
<h2>mySome()</h2>
<p>Without using the native “Array.prototype.some” method of JavaScript, compose a function titled “mySome” that will take in an array of elements and executes a callback function on each of those elements.</p>
<h3> Output </h3>
<p id="Test3"></p>

<script>

</script>
<h2>myEvery()</h2>
<p>Without using the native “Array.prototype.every” method of JavaScript, compose a function titled “myEvery” that will take in an array of elements and executes a callback function on each of those elements.</p>

<h2>myReduce()</h2>
<p>Without using the native “Array.prototype.reduce” method of JavaScript, compose a function titled “myReduce” that will take in an array of elements and executes a callback function on each of those elements.</p>

<h2>myIncludes()</h2>
<p>Without using the native “Array.prototype.includes” method of JavaScript, compose a function titled “myIncludes” that will take in an array of elements and indicates whether or not a target element is contained within the input array. This returns a boolean
</p>

<h2>myIndexOf()</h2>
<p>Without using the native “Array.prototype.indexOf” method of JavaScript, compose a function titled “myIndexOf” that will take in an array of elements and returns the index of the first encounter of a target element (if it is found) or -1 if that element does not exist within the input array.</p>

<h2>myPush()</h2>
<p>Without using the native “Array.prototype.push” method of JavaScript, compose a function titled “myPush” that will take in an array of elements as well as an elementToAdd and append that element to the end of the array.</p>

<h2>myUnshift()</h2>
<p>Without using the native “Array.prototype.lastIndexOf” method of JavaScript, compose a function titled “myUnshift” (typo) that will take in an array of elements and returns the index of the last encounter of a target element (if it is found) or -1 if that element does not exist within the input array.</p>

<h2>grabKeys()</h2>
<p>Without using the native “Object.keys()” method of JavaScript, compose a function titled “grabKeys” that will take in an object and return all of the keys of the key:value pairs of that object.</p>

<h2>grabValues()</h2>
<p>Without using the native “Object.values()” method of JavaScript, compose a function titled “grabValues” that will take in an object and return all of the values of the key:value pairs of that object.</p>



</body>









</html>